---
- hosts: local
  connection: local
  vars:
    git_username: fkarg
    configs_repo: configs
    dotconfigdir: dotconfig
    todotxtrepo: gtd


  tasks:
    # - include: tasks/sth.yml
    # - debug: var=ansible_facts
    # - name: install cron job (ansible-pull)
    #   cron:
    #     user: ansible
    #     name: ansible provision
    #     minute: */10
    #     job: "/usr/bin/ansible-pull -o -U https://github.com/<github_user>/ansible.git > /dev/null"


    - name: Check if .ssh present
      stat:
        path: ~/.ssh/id_rsa.pub
      register: ssh

    - name: Make sure ~/configs/ is present
      git:
        repo: "git@github.com:{{ git_username }}/{{ configs_repo }}.git"
        dest: "~/{{ configs_repo }}"
        accept_hostkey: true
        update: no
      register: repo
      when: ssh is succeeded

    - name: Update ~/configs/ directory
      git:
        repo: "git@github.com:{{ git_username }}/{{ configs_repo }}.git"
        dest: "~/{{ configs_repo }}"
        accept_hostkey: true
      when: repo is succeeded
      ignore_errors: true

    # git config
    - name: link .gitconfig
      file:
        src: "~/{{ configs_repo }}/.gitconfig"
        dest: ~/.gitconfig
        state: link
      when: repo is succeeded

    # .config files
    - name: link vim directory
      file:
        src: "~/{{ configs_repo }}/{{ dotconfigdir }}/nvim"
        dest: ~/.config/vim
        state: link
      when: repo is succeeded

    - name: link nvim directory
      file:
        src: "~/{{ configs_repo }}/{{ dotconfigdir }}/nvim"
        dest: ~/.config/nvim
        state: link
      when: repo is succeeded


    - name: check if i3 directory already exists
      stat: path=~/.config/i3
      register: i3dir_exists

    - name: remove existing i3 directory and config
      file: path=~/.config/i3 state=absent
      when: i3dir_exists.stat.isdir is defined and i3dir_exists.stat.isdir

    - name: link i3 directory
      file:
        src: "~/{{ configs_repo }}/{{ dotconfigdir }}/i3"
        dest: ~/.config/i3
        state: link
      when: repo is succeeded


    - name: check if fish directory already exists
      stat: path=~/.config/fish
      register: fishdir_exists

    - name: remove existing fish directory and config
      file: path=~/.config/fish state=absent
      when: fishdir_exists.stat.isdir is defined and fishdir_exists.stat.isdir

    - name: link fish directory
      file:
        src: "~/{{ configs_repo }}/{{ dotconfigdir }}/fish"
        dest: ~/.config/fish
        state: link
      when: repo is succeeded

    - name: link broot directory
      file:
        src: "~/{{ configs_repo }}/{{ dotconfigdir }}/broot"
        dest: ~/.config/broot
        state: link
      when: repo is succeeded

    - name: link i3status-rs config
      file:
        src: "~/{{ configs_repo }}/{{ dotconfigdir }}/i3status-rust"
        dest: ~/.config/i3status-rust
        state: link
      when: repo is succeeded

    - name: link kitty config
      file:
        src: "~/{{ configs_repo }}/{{ dotconfigdir }}/kitty"
        dest: ~/.config/kitty
        state: link
      when: repo is succeeded

      # - name: link alacritty config
      #   file:
      #     src: "~/{{ configs_repo }}/{{ dotconfigdir }}/alacritty"
      #     dest: ~/.config/alacritty
      #     state: link
      #   when: repo is succeeded

    # Background picture
    - name: create folder for background picture
      file:
        path: ~/Pictures/Space
        state: directory

    - name: copy initial background picture
      copy:
        src: "~/{{ configs_repo }}/background_picture/IMAG7297.JPG"
        dest: "~/Pictures/Space/IMAG7297.JPG"

        # - name: Make sure to start redshift on startup

    # gtd todo files
    - name: link todo.sh config
      file:
        src: "~/{{ configs_repo }}/{{ dotconfigdir }}/todo"
        dest: ~/.config/todo
        state: link
      when: repo is succeeded

    - name: Make sure gtd directory is present
      git:
        repo: "git@github.com:{{ git_username }}/{{ todotxtrepo }}.git"
        dest: "~/{{ todotxtrepo }}"
        update: no
      when: ssh is succeeded

    # set up 'b' 
    - name: Create .local/bin
      file:
        path: ~/.local/bin
        state: directory

    - name: link b
      file:
        src: "~/{{ configs_repo }}/scripts/b.sh"
        dest: ~/.local/bin/b
        state: link
      when: repo is succeeded

    - name: Make sure text_stuff is present
      git:
        repo: "git@github.com:{{ git_username }}/text_zeug.git"
        dest: ~/text_zeug
        update: no
      when: ssh is succeeded
